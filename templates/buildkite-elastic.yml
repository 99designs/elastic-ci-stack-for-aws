## Provides the infrastructure for a scalable buildkite cluster

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Buildkite Configuration
        Parameters:
        - BuildkiteAgentRelease
        - BuildkiteAgentToken
        - BuildkiteQueue
        - BuildkiteOrgSlug
        - BuildkiteApiAccessToken

      - Label:
          default: Network Configuration
        Parameters:
        - VpcId
        - Subnets
        - AvailabilityZones
        - SecurityGroupId
        - ManagedPolicyArns

      - Label:
          default: Instance Configuration
        Parameters:
        - ImageId
        - InstanceType
        - AgentsPerInstance
        - KeyName
        - SpotPrice
        - SecretsBucket
        - ArtifactsBucket
        - AuthorizedUsersUrl
        - BootstrapScriptUrl
        - RootVolumeSize

      - Label:
          default: Auto-scaling Configuration
        Parameters:
        - MinSize
        - MaxSize
        - ScaleUpAdjustment
        - ScaleDownAdjustment
        - AutoscaleStrategy

Parameters:
  KeyName:
    Description: The ssh keypair used to access the buildkite instances
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1

  BuildkiteAgentRelease:
    Type: String
    AllowedValues:
      - stable
      - unstable
      - experimental
    Default: stable

  BuildkiteAgentToken:
    Description: Your Buildkite Agent token
    Type: String
    NoEcho: true
    MinLength: 1

  BuildkiteOrgSlug:
    Description: Optional Buildkite organization slug (required for autoscaling metrics)
    Type: String

  BuildkiteApiAccessToken:
    Description: Optional Buildkite API access token with read_pipelines, read_builds and read_agents (required for autoscaling metrics)
    Type: String
    NoEcho: true

  BuildkiteQueue:
    Description: Queue name that agents will use, targeted in pipeline steps using "queue={value}"
    Type: String
    Default: default
    MinLength: 1

  AgentsPerInstance:
    Description: Number of Buildkite agents to run on each instance
    Type: Number
    Default: 1
    MinValue: 1

  SecretsBucket:
    Description: Optional - name of an existing S3 bucket containing pipeline secrets
    Type: String
    Default: ""

  ArtifactsBucket:
    Description: Optional - name of an existing S3 bucket for build artifact storage
    Type: String
    Default: ""

  AuthorizedUsersUrl:
    Description: Optional - S3 url to periodically download ssh authorized_keys from
    Type: String
    Default: ""

  BootstrapScriptUrl:
    Description: Optional - S3 url to run on each instance during boot
    Type: String
    Default: ""

  VpcId:
    Type: String
    Description: Optional - VPC Id of existing VPC. Leave blank to have a new VPC created
    Default: ""

  Subnets:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of three existing VPC Subnet Ids where ECS instances will run.  Required if setting VpcId.
    Default: ""

  AvailabilityZones:
    Type: CommaDelimitedList
    Description: Optional - Comma-delimited list of VPC availability zones in which to create subnets. Required if setting VpcId.
    Default: ""

  InstanceType:
    Description: The type of instance to use for the agent
    Type: String
    Default: t2.nano
    MinLength: 1

  SpotPrice:
    Description: Optional - Spot price to use for the agents. 0 means normal (non-spot) instances are used
    Type: String
    Default: 0

  MaxSize:
    Description: The maximum number of agents to launch
    Type: Number
    Default: 10
    MinValue: 1

  MinSize:
    Description: The minumum number of agents to launch
    Type: Number
    Default: 0

  ScaleUpAdjustment:
    Description: The number of agents to adjust by on each scale up event (ScheduledJobsCount > 0 for 1 min)
    Type: Number
    Default: 5
    MinValue: 0

  ScaleDownAdjustment:
    Description: The number of agents to remove on each scale down event (UnfinishedJobs == 0 for 30 mins)
    Type: Number
    Default: -1
    MaxValue: 0

  RootVolumeSize:
    Description: Size of EBS volume for root filesystem in GB.
    Type: Number
    Default: 250
    MinValue: 10

  SecurityGroupId:
    Type: String
    Description: Optional - Existing security group to associate the container instances. Creates one by default.
    Default: ""

  ManagedPolicyArns:
    Type: CommaDelimitedList
    Description: Optional - ARNs of existing managed IAM policies to associate with the container instances.
    Default: ""

  ImageId:
    Type: String
    Description: Optional - The AMI to use, otherwise uses the mapping built in
    Default: ""

Conditions:
    UseSpotInstances:
      !Not [ !Equals [ $(SpotPrice), 0 ] ]

    CreateVpcResources:
      !Equals [ $(VpcId), "" ]

    CreateSecurityGroup:
      !Equals [ $(SecurityGroupId), "" ]

    UseSpecifiedAvailabilityZones:
      !Not [ !Equals [ !Join [ "", $(AvailabilityZones) ], "" ]  ]

    UseSecretsBucket:
      !Not [ !Equals [ $(SecretsBucket), "" ] ]

    UseArtifactsBucket:
      !Not [ !Equals [ $(ArtifactsBucket), "" ] ]

    UseBootstrapScript:
      !Not [ !Equals [ $(BootstrapScriptUrl), "" ] ]

    UseAuthorizedUsers:
      !Not [ !Equals [ $(AuthorizedUsersUrl), "" ] ]

    UseDefaultAMI:
      !Equals [ $(ImageId), "" ]

    CreateMetricsStack:
      !Not [ !Equals [ $(BuildkiteApiAccessToken), "" ] ]

    UseSpecifiedIamPolicies:
      !Not [ !Equals [ !Join [ "", $(ManagedPolicyArns) ], "" ]  ]

Mappings:
  BuildkiteAgentReleaseToDocker:
    stable: {Tag: latest}
    unstable: {Tag: beta}
    experimental: {Tag: edge}

Outputs:
  AgentAutoScaleTopic:
    Value: $(AgentAutoScaleTopic)

  AgentAutoScaleTopicName:
    Value: $(AgentAutoScaleTopic[TopicName])

Resources:
  # Allow ec2 instances to assume a role and be granted the IAMPolicies
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ $(IAMRole) ]

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: !If [ "UseSpecifiedIamPolicies", $(ManagedPolicyArns), '$(AWS::NoValue)' ]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
              - autoscaling:CompleteLifecycleAction
              - autoscaling:RecordLifecycleActionHeartbeat
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:*
            Resource: $(AgentLifecycleQueue[Arn])
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - "arn:aws:logs:*:*:*"

      Roles:
        - $(IAMRole)

  SecretsBucketPolicies:
    Type: AWS::IAM::Policy
    Condition: UseSecretsBucket
    Properties:
      PolicyName: SecretsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:Get
              - s3:List*
            Resource:
              - "arn:aws:s3:::$(SecretsBucket)/*"
              - "arn:aws:s3:::$(SecretsBucket)"
      Roles:
        - $(IAMRole)

  ArtifactsBucketPolicies:
    Type: AWS::IAM::Policy
    Condition: UseArtifactsBucket
    Properties:
      PolicyName: ArtifactsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Put*
              - s3:List*
            Resource:
              - "arn:aws:s3:::$(ArtifactsBucket)/*"
              - "arn:aws:s3:::$(ArtifactsBucket)"
      Roles:
        - $(IAMRole)

  AgentLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      SecurityGroups: [ !If [ "CreateSecurityGroup", $(SecurityGroup), $(SecurityGroupId) ] ]
      KeyName: $(KeyName)
      IamInstanceProfile: $(IAMInstanceProfile)
      InstanceType: $(InstanceType)
      SpotPrice: !If [ "UseSpotInstances", $(SpotPrice), '$(AWS::NoValue)' ]
      ImageId: !If [
        "UseDefaultAMI",
        "$(AWSRegion2AMI[$(AWS::Region)][AMI])",
        $(ImageId)
      ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs: { VolumeSize: $(RootVolumeSize), VolumeType: gp2 }
      UserData:
        # XXX: No idea how to do this with tags
        "Fn::Base64":
          "Fn::Join":
            - ""
            - - |2+ # yaml: preserve leading whitespace
                #cloud-config
                write_files:
                  - path: /buildkite/hooks/environment
                    permissions: 0755
                    content: |
                      #!/bin/bash -eu -o pipefail
                      # Expose the stack name
                      export BUILDKITE_STACK_NAME="$(AWS::StackName)"
                      # Start an SSH Agent
                      eval "\$(ssh-agent -s)"
              - !If
                - UseSecretsBucket
                - |2+ # yaml: preserve leading whitespace
                        export BUILDKITE_SECRETS_BUCKET="$(SecretsBucket)"
                        # We need to run awscli from Docker
                        aws_s3_cp=(docker run --interactive --rm pebbletech/docker-aws-cli aws --region "$(AWS::Region)" s3 cp --quiet)
                        if [[ -n "\${BUILDKITE_SECRETS_KEY:-}" ]] ; then
                          aws_s3_cp+=(--sse-c AES256 --sse-c-key "\${BUILDKITE_SECRETS_KEY}")
                        fi
                        # Allow environment vars set in Buildkite to override paths
                        secrets_prefix="\${BUILDKITE_SECRETS_PREFIX:-\$BUILDKITE_PIPELINE_SLUG}"
                        secrets_url_base="s3://\${BUILDKITE_SECRETS_BUCKET}/\${secrets_prefix}"
                        ssh_key_url="\${secrets_url_base}/\${SSH_KEY_NAME:-private_ssh_key}"
                        legacy_ssh_key_url="\${secrets_url_base}/id_rsa_github"
                        shared_ssh_key_url="s3://\${BUILDKITE_SECRETS_BUCKET}/\${SHARED_SSH_KEY_NAME:-private_ssh_key}"
                        env_url="\${secrets_url_base}/env"
                        # Secret SSH key
                        if ssh_key="\$("\${aws_s3_cp[@]}" "\$ssh_key_url" -)"; then
                          echo "Adding ssh key from \$ssh_key_url"
                          ssh-add - <<< "\$ssh_key"
                        elif legacy_ssh_key="\$("\${aws_s3_cp[@]}" "\$legacy_ssh_key_url" -)"; then
                          echo "Adding ssh key from \$legacy_ssh_key_url"
                          ssh-add - <<< "\$legacy_ssh_key"
                        elif shared_ssh_key="\$("\${aws_s3_cp[@]}" "\$shared_ssh_key_url" -)"; then
                          echo "Adding ssh key from \$shared_ssh_key_url"
                          ssh-add - <<< "\$shared_ssh_key"
                        else
                          echo "No SSH key found at:"
                          echo " - \$ssh_key_url"
                          echo " - \$shared_ssh_key_url"
                        fi
                        # Secret environment
                        if env="\$("\${aws_s3_cp[@]}" "\$env_url" -)"; then
                          echo "Applying env from \$env_url"
                          eval "\$env"
                        else
                          echo "No environment found at:"
                          echo " - \$env_url"
                        fi
                - $(AWS::NoValue)
              - |2+ # yaml: preserve leading whitespace
                  - path: /buildkite/hooks/pre-command
                    permissions: 0755
                    content: |
                      #!/bin/bash -eu -o pipefail
                      # For logging into the current AWS account’s registry
                      if [[ -n "\${AWS_ECR_LOGIN:-}" ]]; then
                        echo "~~~ Authenticating with AWS ECR"
                        eval "\$(docker run --interactive --rm pebbletech/docker-aws-cli aws ecr get-login)"
                      fi
                      # For logging into other AWS account’s registries
                      if [[ -n "\${AWS_ECR_LOGIN_REGISTRY_IDS:-}" ]]; then
                        echo "~~~ Authenticating with AWS ECR"
                        eval "\$(docker run --interactive --rm pebbletech/docker-aws-cli aws ecr get-login --registry_ids "\$AWS_ECR_LOGIN_REGISTRY_IDS")"
                      fi
                      # Authenticate with Docker server
                      if [[ -n "\${DOCKER_LOGIN_USER:-}" && -n "\${DOCKER_LOGIN_PASSWORD:-}" ]]; then
                        echo "Authenticating with Docker server"
                        if [[ -n "\${DOCKER_LOGIN_SERVER:-}" ]] ; then
                          docker login --username="\${DOCKER_LOGIN_USER}" --password="\${DOCKER_LOGIN_PASSWORD}" "\${DOCKER_LOGIN_SERVER}"
                        else
                          docker login --username="\${DOCKER_LOGIN_USER}" --password="\${DOCKER_LOGIN_PASSWORD}"
                        fi
                        unset DOCKER_LOGIN_USER
                        unset DOCKER_LOGIN_PASSWORD
                        unset DOCKER_LOGIN_SERVER
                      fi
                  - path: /buildkite/hooks/post-command
                    permissions: 0755
                    content: |
                      #!/bin/bash -eu -o pipefail
                      # Make sure the ssh-agent dies
                      ssh-agent -k
                  - path: /etc/journald-cloudwatch-logs.conf
                    content: |
                      log_group = "$(AWS::StackName)"
                      log_priority = "info"
                      state_file = "/var/lib/journald-cloudwatch-logs/state"
                  - path: /opt/bin/buildkite-agent-lifecycled-handler
                    permissions: 0755
                    content: |
                      #!/bin/bash -eu -o pipefail
                      echo "Telling the Buildkite Agents to stop..."
                      exec systemctl stop "buildkite-agent@*.service"
              - |2+ # yaml: preserve leading whitespace
                coreos:
                  units:
                    - name: update-engine.service
                      command: stop
                    - name: locksmithd.service
                      command: stop
                    - name: buildkite-agent@.service
                      content: |
                        [Unit]
                        PartOf=buildkite-agent.service
                        [Service]
                        Restart=always
                        ExecStartPre=/bin/mkdir -p /buildkite/builds /buildkite/hooks
                        ExecStart=/bin/bash -eu -o pipefail -c 'exec docker run --name %p-%i --interactive --rm --volume /buildkite/builds:/buildkite/builds --volume /buildkite/hooks:/buildkite/hooks:ro --volume /var/run/docker.sock:/var/run/docker.sock buildkite/agent:$(BuildkiteAgentReleaseToDocker[$(BuildkiteAgentRelease)][Tag]) start --name="$(AWS::StackName)-%H-%n" --token "$(BuildkiteAgentToken)" --meta-data queue="$(BuildkiteQueue)" --meta-data docker="\$(docker --version | cut -f3 -d" " | sed "s/,//")" --meta-data stack="$(AWS::StackName)" --meta-data elastic-ci-stack --meta-data-ec2 true --meta-data aws:private-ip=\$private_ipv4 --meta-data aws:public-ip=\$public_ipv4'
                        ExecStop=/usr/bin/docker kill --signal SIGTERM %p-%i
                    - name: buildkite-agent.service
                      command: start
                      content: |
                        [Service]
                        Type=oneshot
                        RemainAfterExit=yes
                        ExecStart=/bin/bash -eu -o pipefail -c 'for i in \$(seq 1 $(AgentsPerInstance)); do systemctl start buildkite-agent@\$i.service; done'
                    - name: docker-gc.service
                      content: |
                        [Service]
                        Type=oneshot
                        ExecStart=/usr/bin/docker run --interactive --rm --volume /var/run/docker.sock:/var/run/docker.sock --env GRACE_PERIOD_SECONDS=604800 --env FORCE_IMAGE_REMOVAL=1 spotify/docker-gc
                    - name: docker-gc.timer
                      command: start
                      content: |
                        [Timer]
                        OnCalendar=daily
                    - name: journald-cloudwatch-logs.service
                      command: start
                      content: |
                        [Unit]
                        After=basic.target network.target
                        [Service]
                        ExecStartPre=/bin/install -d /var/lib/journald-cloudwatch-logs
                        ExecStartPre=/bin/bash -eu -o pipefail -c '[[ -x /opt/bin/journald-cloudwatch-logs ]] || cd /tmp && wget --quiet --continue https://github.com/saymedia/journald-cloudwatch-logs/releases/download/v0.0.1/journald-cloudwatch-logs-linux.zip && unzip -u journald-cloudwatch-logs-linux.zip && install -D /tmp/journald-cloudwatch-logs/journald-cloudwatch-logs /opt/bin/journald-cloudwatch-logs'
                        ExecStart=/opt/bin/journald-cloudwatch-logs /etc/journald-cloudwatch-logs.conf
                    - name: lifecycled.service
                      command: start
                      content: |
                        [Service]
                        Environment=AWS_REGION=$(AWS::Region)
                        ExecStartPre=/bin/bash -eu -o pipefail -c '[[ -x /opt/bin/lifecycled ]] || install -D <(curl --retry 10 -sfL https://github.com/lox/lifecycled/releases/download/v1.1.3/lifecycled-linux-x86_64) /opt/bin/lifecycled'
                        ExecStart=/bin/bash -eu -o pipefail -c 'exec /opt/bin/lifecycled --queue "$(AgentLifecycleQueue)" --instanceid "\$(curl --retry 10 -sf http://169.254.169.254/latest/meta-data/instance-id)" --handler /opt/bin/buildkite-agent-lifecycled-handler'
              - !If
                - UseBootstrapScript
                - |2+ # yaml: preserve leading whitespace
                      - name: bootstrap.service
                        command: start
                        content: |
                          [Unit]
                          Requires=network.target
                          [Service]
                          Type=oneshot
                          ExecStart=/bin/bash -eu -o pipefail -c 'eval "\$(curl --retry 10 -sfL "$(BootstrapScriptUrl)")"'
                - $(AWS::NoValue)
              - !If
                - UseAuthorizedUsers
                - |2+ # yaml: preserve leading whitespace
                      - name: authorized-keys.service
                        command: start
                        content: |
                          [Unit]
                          Requires=network.target
                          [Service]
                          Type=oneshot
                          ExecStart=/bin/bash -eu -o pipefail -c 'curl --retry 10 -sfL "$(AuthorizedUsersUrl)" > /tmp/authorized_keys && install -o core -m 600 /tmp/authorized_keys ~core/.ssh/authorized_keys'
                      - name: authorized-keys.timer
                        command: start
                        content: |
                          [Timer]
                          OnCalendar=hourly
                - $(AWS::NoValue)
              - |2+ # yaml: preserve leading whitespace
                    - name: cfn-signal.service
                      command: start
                      content: |
                        [Unit]
                        After=network.target buildkite-agent.service lifecycled.service journald-cloudwatch-logs.service bootstrap.service authorized-keys.service
                        [Service]
                        Type=oneshot
                        ExecStart=/bin/bash -eu -o pipefail -c 'exec docker run --interactive --rm aweber/cfn-signal --success=true --reason="Units started" --stack=$(AWS::StackName) --resource=AgentAutoScaleGroup'

  AgentLifecycleQueue:
    Type: AWS::SQS::Queue

  AgentLifecycleHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ autoscaling.amazonaws.com ]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AgentLifecyclePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: $(AgentLifecycleQueue[Arn])
      Path: /

  AgentLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: $(AgentAutoScaleGroup)
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: $(AgentLifecycleQueue[Arn])
      RoleARN: $(AgentLifecycleHookRole[Arn])

  AgentAutoScaleTopic:
    Type: AWS::SNS::Topic

  AgentAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !If [
        "CreateVpcResources",
        [ $(Subnet0), $(Subnet1), $(Subnet2) ],
        $(Subnets)
      ]
      LaunchConfigurationName: $(AgentLaunchConfiguration)
      MinSize: $(MinSize)
      MaxSize: $(MaxSize)
      NotificationConfigurations:
        - TopicARN: $(AgentAutoScaleTopic)
          NotificationTypes:
            - "autoscaling:EC2_INSTANCE_LAUNCH"
            - "autoscaling:EC2_INSTANCE_LAUNCH_ERROR"
            - "autoscaling:EC2_INSTANCE_TERMINATE"
            - "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupInServiceInstances
            - GroupTerminatingInstances
            - GroupPendingInstances
      TerminationPolicies:
        - OldestLaunchConfiguration
        - ClosestToNextInstanceHour
      Tags:
        - Key: Role
          Value: buildkite-agent
          PropagateAtLaunch: true
        - Key: Name
          Value: buildkite-agent
          PropagateAtLaunch: true
        - Key: BuildkiteAgentRelease
          Value: $(BuildkiteAgentRelease)
          PropagateAtLaunch: true
        - Key: BuildkiteQueue
          Value: $(BuildkiteQueue)
          PropagateAtLaunch: true

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: $(MinSize)
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: $(MinSize)
        MaxBatchSize: 5
        # On rollback this might have to wait for an agent to finish
        # a job. The agent's init script waits 30 minutes, so we wait
        # a maximum of 40 minutes to be safe.
        PauseTime: PT40M
        WaitOnResourceSignals: true

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: $(AWS::StackName)
      RetentionInDays: 7

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: Enable access to SSH
      VpcId: !If [ "CreateVpcResources", $(Vpc), $(VpcId) ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
